@using System.Security.Claims
@using Microsoft.AspNetCore.Http
@inject IHttpContextAccessor _httpContextAccessor
@inject HttpClient Http
@inject Services.TokenProvider tokenProvider


<style>
	/* Tooltip container */
	.tooltip {
		position: relative;
		display: inline-block;
		border-bottom: 1px dotted black; /* If you want dots under the hoverable text */
	}

		/* Tooltip text */
		.tooltip .tooltiptext {
			visibility: hidden;
			width: auto;
			background-color: black;
			color: #fff;
			text-align: center;
			padding: 5px 10px;
			border-radius: 6px;
			/* Position the tooltip text - see examples below! */
			position: absolute;
			z-index: 1;
		}

		/* Show the tooltip text when you mouse over the tooltip container */
		.tooltip:hover .tooltiptext {
			visibility: visible;
		}
</style>

@if (User?.Identity?.Name != null)
{
	<MudContainer Style="height:100%;width: auto" Class="tooltip">
		<MudImage Class="rounded-xl tooltip pa-1" Src="@Avatar" ObjectFit="ObjectFit.Cover" Style="height:100%" />
		<MudText Class="tooltiptext">@UserId</MudText>
	</MudContainer>

	<MudText>@GivenName @Surname</MudText>
	
	<MudForm action="/Identity/Logout" method="post">
		<MudIconButton ButtonType="ButtonType.Submit" >Logout</MudIconButton>
		<input name="__RequestVerificationToken" type="hidden" value="@tokenProvider.XsrfToken">
	</MudForm>
}
else
{
	<MudIconButton Target="_top" Href="/Identity/Login">Login</MudIconButton>
}
@code {
	private ClaimsPrincipal User;
	private string GivenName;
	private string Surname;
	private string Avatar;
	private string UserId { get; set; }
	[CascadingParameter] protected Task<AuthenticationState> AuthStat { get; set; } = null!;

	protected override async void OnInitialized()
	{
		// Removed the access to the httpcontextaccess as it is not recommended by MSFT for Blazor Server apps.
		// https://learn.microsoft.com/en-us/aspnet/core/fundamentals/http-context?view=aspnetcore-7.0
		// "Don't use IHttpContextAccessor/HttpContext directly or indirectly in the Razor components of Blazor Server apps. Blazor apps run outside of the ASP.NET Core pipeline context. The HttpContext isn't guaranteed to be available within the IHttpContextAccessor, and HttpContext isn't guaranteed to hold the context that started the Blazor app"
		try
		{
			// Set the user to determine if they are logged in
			//User = _httpContextAccessor.HttpContext.User;
			var userObject = (await AuthStat).User;
			User = userObject; 

			//var email = _httpContextAccessor.HttpContext.User.FindFirst(ClaimTypes.Email);
			var email = User.FindFirst(ClaimTypes.Email);
			if (email != null)
			{
				UserId = email.Value;
			}

			// Try to get the GivenName
			//var givenName = _httpContextAccessor.HttpContext.User.FindFirst(ClaimTypes.GivenName);
			var givenName = User.FindFirst(ClaimTypes.GivenName);
			if (givenName != null)
			{
				GivenName = givenName.Value;
			}
			else
			{
				GivenName = User.Identity.Name;
			}

			// Try to get the Surname
			//var surname = _httpContextAccessor.HttpContext.User.FindFirst(ClaimTypes.Surname);
			var surname = User.FindFirst(ClaimTypes.Surname);
			if (surname != null)
			{
				Surname = surname.Value;
			}
			else
			{
				Surname = "";
			}
			// Try to get Avatar
			//var avatar = _httpContextAccessor.HttpContext.User.FindFirst("urn:google:image");
			var avatar = User.FindFirst("urn:google:image");
			if (avatar != null)
			{
				Avatar = avatar.Value;
			}
			else
			{
				Avatar = "";
			}
		}
		catch { }
	}
}